#!/usr/bin/env python3.12
"""
Script to copy a Vivado initialization file from the current working directory
to the correct user directory based on the operating system.

For Windows: %APPDATA%/Xilinx/Vivado/Vivado_init.tcl
For Linux: $HOME/.Xilinx/Vivado/Vivado_init.tcl
"""

import os
import sys
import shutil
import platform
from pathlib import Path

VIVADO_INIT_FILENAME: str = "Vivado_init.tcl"
VIVADO_VERSION: str = "2020.1"

VIVADO_INIT_FILE_TEMPLATE: str = """
# This file is automatically generated by init.py
"""


def get_vivado_init_path() -> Path:
    """
    Determine the correct Vivado_init.tcl path based on the operating system.

    Returns:
        Path: The full path to the Vivado_init.tcl destination
    """
    system: str = platform.system()
    base_path: Path = Path("")

    if system == "Windows":
        # For Windows, use %APPDATA%/Xilinx/Vivado/
        appdata: str = os.environ.get("APPDATA", "")
        if not appdata:
            raise EnvironmentError("APPDATA environment variable not found")
        base_path = Path(appdata) / "Xilinx" / "Vivado"
    else:
        # For Linux and other Unix-like systems, use $HOME/.Xilinx/Vivado/
        home: str = os.environ.get("HOME", "")
        if not home:
            raise EnvironmentError("HOME environment variable not found")
        base_path = Path(home) / ".Xilinx" / "Vivado"

    return base_path / "Vivado_init.tcl"


def ensure_directory_exists(path: Path) -> None:
    """
    Ensure that the directory for the given path exists.

    Args:
        path: Path to check and create if necessary

    Raises:
        OSError: If directory creation fails
    """
    if not path.parent.exists():
        try:
            os.makedirs(path.parent, exist_ok=True)
            print(f"Created directory: {path.parent}")
        except OSError as e:
            raise OSError(f"Failed to create directory {path.parent}: {e}")


def copy_vivado_init_file(source_filename: str = VIVADO_INIT_FILENAME) -> bool:
    """
    Copy the Vivado_init.tcl file from the current working directory
    to the appropriate location based on the OS.

    Args:
        source_filename: Name of the source file in the current directory

    Returns:
        bool: True if successful, False otherwise
    """
    # Get current working directory
    cwd: Path = Path.cwd()
    source_path: Path = cwd / source_filename

    # Check if source file exists
    if not source_path.exists():
        print(f"Error: Source file '{source_path}' not found in the current directory.")
        return False

    try:
        # Get destination path
        dest_path: Path = get_vivado_init_path()

        # Ensure the destination directory exists
        ensure_directory_exists(dest_path)

        # Copy the file (shutil.copy2 preserves metadata)
        shutil.copy2(source_path, dest_path)
        print(f"Successfully copied '{source_filename}' to '{dest_path}'")
        return True
    except Exception as e:
        print(f"Error during copy operation: {e}")
        return False


def main() -> None:
    """
    Main function to execute the file copy operation.

    Returns:
        None
    """
    # Default file name is Vivado_init.tcl but allow override via command line
    source_file: str = "Vivado_init.tcl"

    # Check if a filename was specified on the command line
    if len(sys.argv) > 1:
        source_file = sys.argv[1]

    # Display current system information
    system: str = platform.system()
    print(f"Operating System: {system}")

    try:
        dest_path: Path = get_vivado_init_path()
        print(f"Destination: {dest_path}")

        # Copy the file
        success: bool = copy_vivado_init_file(source_file)

        # Exit with appropriate status code
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"Critical error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
